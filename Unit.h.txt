#ifndef UNIT_H
#define UNIT_H

#include <QImage>
#include <QPixmap>


class Unit{
public:
	Unit(int, int);		// row, col;
	virtual bool bombObject();	// action for bombing Unit
	void getPostion(int&, int&);	// get row col of Unit;

private:
	int row, col;
}

class Item{
public:
	Item(int, int, QImage*);	// row, col, imageSrc
	void setItemStat(int, int);	// stat_type, increasement
	bool bombObject()		// true - Item destroyed, false - Nothing happened
	bool itemConsumed(Player*)	// when player gets item, stat change
private:
	QImage* imageSrc;
	// 0 - bombNum, 1 - bombPower, 2 - Speed, 3 - Life
	enum {BOMB_NUM, BOMB_POWER, SPEED, LIFE};
	int stat[4];
}

class Player: public Unit{
public:
	Player(Team, Character*);
	// get private member function;
	Team getTeam();
	Character getCharacter();
	///////////////////////////////
	bool bombObject();		//true : Player killed, false : life--;

private:
	int board_row, board_col;	// tiny segement position of row, col
	Team team;
	Character* character;
}

class Soju: public Unit{
public:
	Soju(int, int, QImage*);	// row, col, imageSrc;
	// get private member function
	int getTime();
	int getPower();
	//////////////////////////////
	bool bombObject();		// true : bomb Soju immediately
private:
	QImage* imageSrc;
	int time;			// zero for bomb
	int power;			// power of soju
}

class Block: public Unit{
public:
	Block();
	Block(int, int, QImage*);	// row, col, imageSrc
	~Block();
	// get private member fct
	Item* getItem();
	bool isBreakable();
	bool isMovable();
	//////////////////////////
	void moveBlock(Direction);	// moving in direction
	bool bombObject();		// true : break block, false : nothing happened;
	void placeItem(Item*)		// item setting
private:
	bool breakable;
	bool movable;
	QImage* imageSrc;
	bool hasItem;
	Item* item;
}

#endif
